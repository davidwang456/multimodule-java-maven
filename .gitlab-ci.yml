# GitLab CI/CD 配置文件
# 多模块SpringBoot项目CI/CD流程

# 定义阶段
stages:
  - build
  - test
  - package
  - deploy
  - publish

# 定义变量
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  JAVA_VERSION: "17"
  MAVEN_REPOSITORY_URL: "https://nexus.example.com/repository/maven-releases/"
  MAVEN_SNAPSHOT_URL: "https://nexus.example.com/repository/maven-snapshots/"

# 缓存配置
cache:
  paths:
    - .m2/repository/
    - target/

# 构建阶段
build:
  stage: build
  image: maven:3.9.6-openjdk-17
  before_script:
    - echo "开始构建项目..."
    - java -version
    - mvn -version
  script:
    - mvn clean compile $MAVEN_CLI_OPTS
  artifacts:
    paths:
      - target/
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# 测试阶段
test:
  stage: test
  image: maven:3.9.6-openjdk-17
  services:
    - name: mysql:8.0
      alias: mysql
      variables:
        MYSQL_ROOT_PASSWORD: "123456"
        MYSQL_DATABASE: "multi_springboot_test"
        MYSQL_USER: "testuser"
        MYSQL_PASSWORD: "testpass"
  variables:
    SPRING_PROFILES_ACTIVE: "test"
    SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/multi_springboot_test?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai"
    SPRING_DATASOURCE_USERNAME: "testuser"
    SPRING_DATASOURCE_PASSWORD: "testpass"
  before_script:
    - echo "开始运行测试..."
    - echo "等待MySQL启动..."
    - sleep 30
  script:
    - mvn test $MAVEN_CLI_OPTS
  artifacts:
    reports:
      junit: "**/target/surefire-reports/TEST-*.xml"
    paths:
      - "**/target/surefire-reports/"
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'
  only:
    - main
    - develop
    - merge_requests

# 打包阶段
package:
  stage: package
  image: maven:3.9.6-openjdk-17
  before_script:
    - echo "开始打包项目..."
  script:
    - mvn clean package -DskipTests $MAVEN_CLI_OPTS
    - echo "打包完成，生成的文件："
    - ls -la web/target/
  artifacts:
    paths:
      - web/target/*.jar
    expire_in: 1 week
  only:
    - main
    - develop
    - tags

# 创建Docker镜像
docker_build:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "开始构建Docker镜像..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - tags

# 部署到Maven私有仓库
deploy_to_maven_repository:
  stage: publish
  image: maven:3.9.6-openjdk-17
  before_script:
    - echo "开始部署到Maven私有仓库..."
    - echo "当前分支: $CI_COMMIT_REF_NAME"
    - echo "当前标签: $CI_COMMIT_TAG"
    # 创建Maven settings.xml文件
    - cp maven-settings.xml ~/.m2/settings.xml
    - sed -i "s/\${MAVEN_REPOSITORY_USERNAME}/$MAVEN_REPOSITORY_USERNAME/g" ~/.m2/settings.xml
    - sed -i "s/\${MAVEN_REPOSITORY_PASSWORD}/$MAVEN_REPOSITORY_PASSWORD/g" ~/.m2/settings.xml
    - sed -i "s/nexus.example.com/$MAVEN_REPOSITORY_HOST/g" ~/.m2/settings.xml
  script:
    # 根据分支或标签决定部署到哪个仓库
    - |
      if [ "$CI_COMMIT_TAG" != "" ] || [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        echo "部署Release版本到私有仓库..."
        # 确保版本是Release版本（移除-SNAPSHOT后缀）
        mvn versions:set -DremoveSnapshot=true -DnewVersion=${CI_COMMIT_TAG:-1.0.0} $MAVEN_CLI_OPTS
        mvn clean deploy -DskipTests $MAVEN_CLI_OPTS
      else
        echo "部署SNAPSHOT版本到私有仓库..."
        # 确保版本是SNAPSHOT版本
        mvn versions:set -DnewVersion=1.0.0-SNAPSHOT $MAVEN_CLI_OPTS
        mvn clean deploy -DskipTests $MAVEN_CLI_OPTS
      fi
  artifacts:
    paths:
      - "**/target/*.jar"
      - "**/target/*.pom"
    expire_in: 1 month
  only:
    - main
    - develop
    - tags

# 部署到测试环境
deploy_test:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "部署到测试环境..."
    - scp web/target/*.jar $TEST_SERVER_USER@$TEST_SERVER_HOST:$TEST_SERVER_PATH/
    - ssh $TEST_SERVER_USER@$TEST_SERVER_HOST "cd $TEST_SERVER_PATH && ./restart.sh"
  environment:
    name: test
    url: http://test.example.com
  only:
    - develop

# 部署到生产环境
deploy_prod:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "部署到生产环境..."
    - scp web/target/*.jar $PROD_SERVER_USER@$PROD_SERVER_HOST:$PROD_SERVER_PATH/
    - ssh $PROD_SERVER_USER@$PROD_SERVER_HOST "cd $PROD_SERVER_PATH && ./restart.sh"
  environment:
    name: production
    url: http://prod.example.com
  when: manual
  only:
    - main
    - tags 