# GitLab CI/CD 配置文件
# 多模块SpringBoot项目CI/CD流程
variables:
  build_enable: "true"
  test_enable: "true"
  package_enable: "true"
  deploy_enable: "true"
  publish_enable: "true"
  scan_enable: "true"
  # 覆盖率配置选项
  coverage_profile_enable: "false"  # 是否使用coverage profile
  skip_coverage_check: "false"      # 是否跳过覆盖率检查

# 定义阶段
stages:
  - build
  - test
  - package
  - deploy
  - publish
  - sonarqube
  - scan

# 定义变量
variables:
  # 指定项目目录（如果.gitlab-ci.yml不在根目录，修改此处即可）
  PROJECT_PATH: .
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -f $PROJECT_PATH"
  JAVA_VERSION: "17"
  MAVEN_REPOSITORY_URL: "https://nexus.example.com/repository/maven-releases/"
  MAVEN_SNAPSHOT_URL: "https://nexus.example.com/repository/maven-snapshots/"
  # 获取pom.xml中的版本
  PROJECT_VERSION: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f $PROJECT_PATH)


# 缓存配置
cache:
  paths:
    - .m2/repository/
    - target/

# 构建阶段
build:
  stage: build
  image: maven:3.9.6-openjdk-17
  before_script:
    - echo "开始构建项目..."
    - java -version
    - mvn -version
  script:
    - mvn clean compile $MAVEN_CLI_OPTS
  artifacts:
    paths:
      - target/
    expire_in: 1 hour
  rules:
    - if: $build_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never

# 测试阶段
test:
  stage: test
  image: maven:3.9.6-openjdk-17
  services:
    - name: mysql:8.0
      alias: mysql
      variables:
        MYSQL_ROOT_PASSWORD: "123456"
        MYSQL_DATABASE: "multi_springboot_test"
        MYSQL_USER: "testuser"
        MYSQL_PASSWORD: "testpass"
  variables:
    SPRING_PROFILES_ACTIVE: "test"
    SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/multi_springboot_test?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai"
    SPRING_DATASOURCE_USERNAME: "testuser"
    SPRING_DATASOURCE_PASSWORD: "testpass"
  before_script:
    - echo "开始运行测试..."
    - echo "等待MySQL启动..."
    - sleep 30
  script:
    # 根据配置选择是否使用coverage profile
    - |
      if [ "$coverage_profile_enable" = "true" ]; then
        echo "使用coverage profile运行测试..."
        if [ "$skip_coverage_check" = "true" ]; then
          mvn clean test -Pcoverage,skip-coverage-check $MAVEN_CLI_OPTS
        else
          mvn clean test -Pcoverage $MAVEN_CLI_OPTS
        fi
      else
        echo "使用默认配置运行测试..."
        mvn clean test $MAVEN_CLI_OPTS
      fi
    - echo "测试覆盖率报告位置："
    - find . -name "jacoco.xml" -o -name "index.html" | grep jacoco
  artifacts:
    reports:
      junit: "**/target/surefire-reports/TEST-*.xml"
    paths:
      - "**/target/surefire-reports/"
      - "**/target/site/jacoco/"
      - "**/target/jacoco.exec"
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'
  rules:
    - if: $test_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never

# 打包阶段
package:
  stage: package
  image: maven:3.9.6-openjdk-17
  before_script:
    - echo "开始打包项目..."
  script:
    - mvn clean package -DskipTests $MAVEN_CLI_OPTS
    - echo "打包完成，生成的文件："
    - ls -la web/target/
  artifacts:
    paths:
      - web/target/*.jar
    expire_in: 1 week
  rules:
    - if: $package_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never

# 创建Docker镜像
docker_build:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "开始构建Docker镜像..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  rules:
    - if: $package_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never

# 部署到Maven私有仓库
deploy_to_maven_repository:
  stage: publish
  image: maven:3.9.6-openjdk-17
  before_script:
    - echo "开始部署到Maven私有仓库..."
    - echo "当前分支: $CI_COMMIT_REF_NAME"
    - echo "当前标签: $CI_COMMIT_TAG"
    # 创建Maven settings.xml文件
    - cp maven-settings.xml ~/.m2/settings.xml
    - sed -i "s/\${MAVEN_REPOSITORY_USERNAME}/$MAVEN_REPOSITORY_USERNAME/g" ~/.m2/settings.xml
    - sed -i "s/\${MAVEN_REPOSITORY_PASSWORD}/$MAVEN_REPOSITORY_PASSWORD/g" ~/.m2/settings.xml
    - sed -i "s/nexus.example.com/$MAVEN_REPOSITORY_HOST/g" ~/.m2/settings.xml
  script:
    # 获取pom.xml中的版本
    - export PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout $MAVEN_CLI_OPTS)
    - echo "当前项目版本: $PROJECT_VERSION"
    # 根据分支或标签决定部署到哪个仓库
    - |
      if [ "$CI_COMMIT_TAG" != "" ] || [ "$CI_COMMIT_REF_NAME" = "main" ] || [ "$CI_COMMIT_REF_NAME" = "master" ]; then
        echo "部署Release版本到私有仓库..."
        # 确保版本是Release版本（移除-SNAPSHOT后缀）
        mvn versions:set -DremoveSnapshot=true -DnewVersion=${CI_COMMIT_TAG:-1.0.0} $MAVEN_CLI_OPTS
        mvn clean deploy -DskipTests $MAVEN_CLI_OPTS
      else
        echo "部署SNAPSHOT版本到私有仓库..."
        # 确保版本是SNAPSHOT版本
        mvn versions:set -DnewVersion=1.0.0-SNAPSHOT $MAVEN_CLI_OPTS
        mvn clean deploy -DskipTests $MAVEN_CLI_OPTS
      fi
  artifacts:
    paths:
      - "**/target/*.jar"
      - "**/target/*.pom"
    expire_in: 1 month
  rules:
    - if: $publish_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never

# 部署到测试环境
deploy_test:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "部署到测试环境..."
    - scp web/target/*.jar $TEST_SERVER_USER@$TEST_SERVER_HOST:$TEST_SERVER_PATH/
    - ssh $TEST_SERVER_USER@$TEST_SERVER_HOST "cd $TEST_SERVER_PATH && ./restart.sh"
  environment:
    name: test
    url: http://test.example.com
  rules:
    - if: $deploy_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never

# 部署到生产环境
deploy_prod:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "部署到生产环境..."
    - scp web/target/*.jar $PROD_SERVER_USER@$PROD_SERVER_HOST:$PROD_SERVER_PATH/
    - ssh $PROD_SERVER_USER@$PROD_SERVER_HOST "cd $PROD_SERVER_PATH && ./restart.sh"
  environment:
    name: production
    url: http://prod.example.com
  when: manual
  rules:
    - if: $deploy_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: manual
    - when: never

# 安全扫描阶段（示例）
security_scan:
  stage: scan
  image: owasp/zap2docker-stable:latest
  before_script:
    - echo "开始安全扫描..."
  script:
    - echo "执行安全扫描..."
    - echo "扫描完成"
  artifacts:
    paths:
      - scan-results/
    expire_in: 1 week
  rules:
    - if: $scan_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never

# SonarQube代码质量分析
sonarqube:
  stage: sonarqube
  image: maven:3.9.6-openjdk-17
  before_script:
    - echo "开始SonarQube代码质量分析..."
    - echo "当前分支: $CI_COMMIT_REF_NAME"
    - echo "当前提交: $CI_COMMIT_SHA"
  script:
    # 确保测试覆盖率报告存在
    - echo "检查覆盖率报告文件..."
    - find . -name "jacoco.xml" -o -name "index.html" | grep jacoco || echo "未找到JaCoCo报告"
    - find . -name "*.exec" | grep jacoco || echo "未找到JaCoCo执行文件"
    
    # 根据配置选择是否使用coverage profile运行SonarQube分析
    - |
      if [ "$coverage_profile_enable" = "true" ]; then
        echo "使用coverage profile运行SonarQube分析..."
        mvn sonar:sonar -Pcoverage $MAVEN_CLI_OPTS \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.projectKey=$CI_PROJECT_PATH_SLUG \
          -Dsonar.projectName="$CI_PROJECT_NAME" \
          -Dsonar.projectVersion=$PROJECT_VERSION \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.test.binaries=target/test-classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=**/target/site/jacoco/jacoco.xml \
          -Dsonar.coverage.exclusions=**/test/**,**/Test.java,**/*Test.java \
          -Dsonar.test.exclusions=**/test/**,**/Test.java,**/*Test.java \
          -Dsonar.java.source=17 \
          -Dsonar.sourceEncoding=UTF-8
      else
        echo "使用默认配置运行SonarQube分析..."
        mvn sonar:sonar $MAVEN_CLI_OPTS \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.projectKey=$CI_PROJECT_PATH_SLUG \
          -Dsonar.projectName="$CI_PROJECT_NAME" \
          -Dsonar.projectVersion=$PROJECT_VERSION \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.test.binaries=target/test-classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=**/target/site/jacoco/jacoco.xml \
          -Dsonar.coverage.exclusions=**/test/**,**/Test.java,**/*Test.java \
          -Dsonar.test.exclusions=**/test/**,**/Test.java,**/*Test.java \
          -Dsonar.java.source=17 \
          -Dsonar.sourceEncoding=UTF-8
      fi
    
    - echo "SonarQube分析完成"
  artifacts:
    paths:
      - "**/target/sonar/"
    expire_in: 1 week
  rules:
    - if: $scan_enable == "true" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG != "")
      when: always
    - when: never 